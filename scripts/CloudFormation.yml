AWSTemplateFormatVersion: '2010-09-09'
Description: 'WordPress deployment on AWS with Docker, EFS, RDS and Load Balancer'

Parameters:
  KeyName:
    Description: Nome da chave SSH para acesso à instância EC2
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Deve ser o nome de uma chave SSH existente

  InstanceType:
    Description: Tipo da instância EC2
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Deve ser um tipo de instância válido

  DBName:
    Description: Nome do banco de dados MySQL
    Type: String
    Default: wordpress
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Deve começar com uma letra e conter apenas alfanuméricos

  DBUser:
    Description: Nome de usuário do banco de dados
    Type: String
    Default: wpuser
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Deve começar com uma letra e conter apenas alfanuméricos

  DBPassword:
    Description: Senha do banco de dados
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Deve conter apenas alfanuméricos

Resources:
  # VPC e Rede
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WordPress VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WordPress IGW

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server with SSH, HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # EFS File System
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: WordPress EFS

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # RDS Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for WordPress RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      EngineVersion: 8.0
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: WordPress Database

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - MountTarget1
      - Database
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 - Atualize com a AMI apropriada
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: WordPress Docker Host
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Atualizar pacotes
          yum update -y
          
          # Instalar pacotes necessários
          yum install -y amazon-efs-utils docker git
          
          # Iniciar e habilitar Docker
          systemctl start docker
          systemctl enable docker
          
          # Adicionar usuário ec2-user ao grupo docker
          usermod -a -G docker ec2-user
          
          # Instalar docker-compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Criar diretório para montar EFS
          mkdir -p /mnt/efs
          
          # Montar EFS
          mount -t efs ${FileSystem}:/ /mnt/efs
          
          # Adicionar entrada no /etc/fstab para montar o EFS na inicialização
          echo "${FileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          
          # Criar diretório para wp-content
          mkdir -p /mnt/efs/wp-content
          chmod 755 /mnt/efs/wp-content
          
          # Criar diretório para o projeto WordPress
          mkdir -p /home/ec2-user/wordpress
          
          # Criar o arquivo docker-compose.yml
          cat > /home/ec2-user/wordpress/docker-compose.yml << 'EOF'
          version: '3'
          
          services:
            wordpress:
              image: wordpress:latest
              ports:
                - "80:80"
              restart: always
              environment:
                WORDPRESS_DB_HOST: ${Database.Endpoint.Address}
                WORDPRESS_DB_USER: ${DBUser}
                WORDPRESS_DB_PASSWORD: ${DBPassword}
                WORDPRESS_DB_NAME: ${DBName}
              volumes:
                - /mnt/efs/wp-content:/var/www/html/wp-content
          EOF
          
          # Iniciar o container WordPress
          cd /home/ec2-user/wordpress
          docker-compose up -d

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Instances:
        - !Ref EC2Instance
      Tags:
        - Key: Name
          Value: WordPress Load Balancer

Outputs:
  WebsiteURL:
    Description: URL para acessar o WordPress
    Value: !Join ['', ['http://', !GetAtt LoadBalancer.DNSName]]
  
  EC2InstanceId:
    Description: ID da instância EC2
    Value: !Ref EC2Instance
  
  RDSEndpoint:
    Description: Endpoint do RDS
    Value: !GetAtt Database.Endpoint.Address
  
  EFSId:
    Description: ID do sistema de arquivos EFS
    Value: !Ref FileSystem
